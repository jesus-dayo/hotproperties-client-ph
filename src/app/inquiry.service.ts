import {Injectable} from '@angular/core';
import {HttpClient, HttpHeaders} from '@angular/common/http';

import {Response} from '@angular/http';
import {Observable} from 'rxjs/Observable';
import {of} from 'rxjs/observable/of';

import {Inquiry} from './inquiry/inquiry';

const httpOptions = {
    headers: new HttpHeaders({'Content-Type': 'application/json'})
};

@Injectable()
export class InquiryService {

  private propertyUrl = '/api/inquiry/manage/v1';

  constructor(private http: HttpClient) { }

  inquire(inquiry: Inquiry): Observable<string> {
        const url = `${this.propertyUrl}/create`;
      return this.http.post(url, inquiry, httpOptions)
          .map(this.handleSuccess);
  }

  handleSuccess(response: Response) { // the return here is any, as you dont know how do the POJO(s) generated by response.json() look like
      let body;

      if (response) {
          body = response;
      }

      return body || {};
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
      return (error: any): Observable<T> => {

          // TODO: send the error to remote logging infrastructure
          console.error(error); // log to console instead

          // TODO: better job of transforming error for user consumption
        //  this.log(`${operation} failed: ${error.message}`);

          // Let the app keep running by returning an empty result.
          return of(result as T);
      };
  }

}
